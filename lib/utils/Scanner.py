import sys
from lib.utils.dirs import *
from lib.utils.usage import *
from lib.utils.settings import *
from lib.handler.fingerprint import *
from lib.handler.crawler import *
import requests
import json
import urllib2

path = os.path.join(os.path.abspath('.').split('lib')[0], 'plugins/attacks/')

vulnerabilityObject = {  # This is a scanned vulnerability object
    'Name',  # name of vulnerabilty
    'Vulnerability Status'  # status of vulnerabilty

}

responseObject = {"URL_Tested": "",
                  "IdScann": "",
                  "Results": ""}

vulnerabylitiesResponse = []


class Scanner(object):

    def __init__(self, url, vulnerabilities, idScann):
        self.url = url
        self.vulnerabilities = vulnerabilities
        self.id_scann = idScann

    def start(self):
        kwargs = ARGS
        # PTIME(self.url)
        vulnerabylitiesResponse = []
        for file in dirs(path):
            name_file = file.split('.py')[0]
            result = False
            at_least_one = False
            if name_file in self.vulnerabilities:
                # crawler
                current_url = None
                result = False
                try:
                    for u in Crawler().run(kwargs, self.url, kwargs['data']):
                        current_url = u.split("?")[0] + "?id=1"
                        __import__('plugins.attacks.%s' % name_file)
                        module = sys.modules['plugins.attacks.%s' % name_file]
                        module = module.__dict__[name_file]
                        status = module(kwargs, current_url, kwargs['data']).run()
                        if status:
                            result = True
                            at_least_one = True
                            vulnerabylitiesResponse.append(
                                {'Vulnerability': name_file, 'VulnerabilityStatus': str(result),
                                 'VulnerableUrl': str(current_url)})

                    if at_least_one == False:
                        vulnerabylitiesResponse.append({'Vulnerability': name_file, 'VulnerabilityStatus': str(result),
                                                        'VulnerableUrl': str(self.url)})
                except urllib2.URLError as e:  # Exception when URL doesn't exist
                    vulnerabylitiesResponse.append({'Error': str(e)})
                except ValueError as e:  # Exception when the URL doesn't include a protocol
                    vulnerabylitiesResponse.append({'Error': str(e)})
                except socket.error as e:  # Exception when request is timed out
                    vulnerabylitiesResponse.append({'Error': str(e)})
        # print(vulnerabylitiesResponse)
        # CREATE POST
        responseObject = json.dumps(
            {'URL_Tested': str(self.url), 'IdScann': str(self.id_scann), 'Results': vulnerabylitiesResponse})
        headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
        requests.post('http://localhost:3000/api/v1/notify', data=responseObject, headers=headers)
        # requests.post('http://localhost:5000/', data=responseObject, headers=headers)
