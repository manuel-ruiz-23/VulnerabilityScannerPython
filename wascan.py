#!/usr/bin/env python 
# -*- coding:utf-8 -*-
#
# @name:    Wascan - Web Application Scanner
# @repo:    https://github.com/m4ll0k/Wascan
# @author:  Momo Outaadi (M4ll0k)
# @license: See the file 'LICENSE.txt'
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# --
import getopt

# -- modules
from lib.handler.crawler import *
from lib.handler.fingerprint import *
from lib.handler.fullscan import *
from lib.utils.exception import *
from lib.utils.settings import *
# -- lib
from lib.utils.usage import *


class wascan(object):
    """ WAScan """
    usage = usage()

    def main(self):
        kwargs = ARGS
        # verbose default == False
        verbose = False
        # scan default == 5
        scan = "5"
        if len(sys.argv) < 1:
            # True == exit
            self.usage.basic(True)
        try:
            opts, args = getopt.getopt(ARGV[1:], CHAR, LIST_NAME)
        except getopt.GetoptError, e:
            # True == exit
            self.usage.basic(True)
        # wascan banner
        self.usage.banner()
        # process args
        # for opt, arg in opts:
        #     if opt in ('-u', '--url'): url = CUrl(arg)
        #     if opt in ('-s', '--scan'): scan = CScan(arg)
        #     if opt in ('-H', '--headers'): kwargs['headers'] = CHeaders(arg)
        #     if opt in ('-d', '--data'): kwargs['data'] = arg
        #     if opt in ('-b', '--brute'): kwargs['brute'] = True
        #     if opt in ('-m', '--method'): kwargs['method'] = arg
        #     if opt in ('-h', '--host'): kwargs['headers'].update({'Host': arg})
        #     if opt in ('-R', '--referer'): kwargs['headers'].update({'Referer': arg})
        #     if opt in ('-a', '--auth'): kwargs['auth'] = CAuth(arg)
        #     if opt in ('-A', '--agent'): kwargs['agent'] = arg
        #     if opt in ('-C', '--cookie'): kwargs['cookie'] = arg
        #     if opt in ('-r', '--ragent'): kwargs['agent'] = ragent()
        #     if opt in ('-p', '--proxy'): kwargs['proxy'] = arg
        #     if opt in ('-P', '--proxy-auth'): kwargs['pauth'] = CAuth(arg)
        #     if opt in ('-t', '--timeout'): kwargs['timeout'] = arg
        #     if opt in ('-n', '--redirect'): kwargs['redirect'] = False
        #     if opt in ('-v', '--verbose'): verbose = True
        #     if opt in ('-V', '--version'): version = Version()
        #     if opt in ('-hh', '--help'): self.usage.basic(True)

        # starting
        url = 'http://www.takearth.com/XSS/index.php?id=1'
        parse = SplitURL(url)
        try:
            PTIME(url)

            Fingerprint(kwargs, url).run()
            Attacks(kwargs, url, kwargs['data'])

        except WascanUnboundLocalError, e:
            pass


if __name__ == "__main__":
    try:
        wascan().main()
    except KeyboardInterrupt, e:
        exit(warn('Exiting... :('))
